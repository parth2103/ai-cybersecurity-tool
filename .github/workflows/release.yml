name: Release Pipeline

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: '3.11'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog from CHANGELOG.md
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version
          awk "/^## \[$VERSION\]/{flag=1;next}/^## \[/{flag=0}flag" CHANGELOG.md > release_notes.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "changelog=Release $VERSION" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.changelog.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
        
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable
      run: |
        # Create a simple executable for the API
        pyinstaller --onefile --name ai-cybersecurity-tool api/app.py
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ai-cybersecurity-tool-${{ matrix.os }}
        path: |
          dist/
          models/
          deploy/
        retention-days: 30
        
  docker-release:
    name: Build Release Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ai-cybersecurity-tool:${{ steps.version.outputs.version }}
          ${{ secrets.DOCKER_USERNAME }}/ai-cybersecurity-tool:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend/cybersecurity-dashboard
        file: ./frontend/cybersecurity-dashboard/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ai-cybersecurity-frontend:${{ steps.version.outputs.version }}
          ${{ secrets.DOCKER_USERNAME }}/ai-cybersecurity-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKER_USERNAME }}/ai-cybersecurity-tool:${{ github.ref_name }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [build-release, docker-release, security-scan]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#releases'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always()
      
    - name: Notify Teams
      uses: skitionek/notify-microsoft-teams@master
      with:
        webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
        title: "AI Cybersecurity Tool Release"
        summary: "New release ${{ github.ref_name }} has been published"
        text: |
          **Version:** ${{ github.ref_name }}
          **Status:** ${{ job.status }}
          **Docker Images:** 
          - ${{ secrets.DOCKER_USERNAME }}/ai-cybersecurity-tool:${{ github.ref_name }}
          - ${{ secrets.DOCKER_USERNAME }}/ai-cybersecurity-frontend:${{ github.ref_name }}
      if: always()
